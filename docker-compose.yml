services:
  # PostgreSQL with pgvector
  postgres:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    container_name: community-ai-postgres
    environment:
      POSTGRES_DB: community_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: community-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage (replacement for Ozone)
  minio:
    image: minio/minio:latest
    container_name: community-ai-minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin123
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: server /data --console-address ":9001"

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: community-ai-app
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=community_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/community_ai
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin123
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./scripts:/app/scripts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: >
      sh -c "
        echo '🚀 開始初始化資料收集...' &&
        python scripts/init_data_collection.py || echo '⚠️ 初始化失敗，但繼續啟動服務...' &&
        echo '✅ 啟動 API 服務...' &&
        python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend (React)
  frontend:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
    container_name: community-ai-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://app:8000
    depends_on:
      - app

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: community-ai-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
      - frontend

  # Scheduler (for cron jobs)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: community-ai-scheduler
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=community_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/community_ai
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin123
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: sh -c "cd /app/src/scheduler && python main.py"

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  default:
    name: community-ai-network
