services:
  # PostgreSQL with pgvector
  postgres:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    container_name: community-ai-postgres
    environment:
      POSTGRES_DB: community_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks: [community-ai-network]

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: community-ai-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks: [community-ai-network]

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: community-ai-minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks: [community-ai-network]

  # Main Application (FastAPI / Uvicorn)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: community-ai-app
    env_file: [.env]
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/community_ai
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      postgres: {condition: service_healthy}
      redis: {condition: service_healthy}
      minio: {condition: service_healthy}
    networks: [community-ai-network]

  # Frontend React App
  frontend:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
    container_name: community-ai-frontend
    environment:
      - VITE_API_URL=${API_URL}
      - VITE_FRONTEND_URL=${FRONTEND_URL}
    depends_on: [app]
    networks: [community-ai-network]

  # Scheduler (cron jobs)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: community-ai-scheduler
    env_file: [.env]
    depends_on:
      postgres: {condition: service_healthy}
      redis: {condition: service_healthy}
      minio: {condition: service_healthy}
    command: sh -c "cd /app/src/scheduler && python main.py"
    networks: [community-ai-network]

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: community-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on: [app, frontend]
    networks: [community-ai-network]

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  community-ai-network:
    driver: bridge